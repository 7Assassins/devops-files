#bash scripts my server#

#!/usr/bin/env bash


 #build function
 build() {
         TAG_NAME=$1
         if [ "$TAG_NAME" == "" ] ; then
                 TAG_NAME="pixelstreaming-demo"
         fi
         echo "TAG_NAME:${TAG_NAME}"
         docker build -t ${TAG_NAME} .
 }


#stop function
stop(){
          docker-compose $COMPOSE_FLAGS down
}


#ps function
dcps(){
          docker-compose $COMPOSE_FLAGS ps
}


start(){
     # Determine which release of the Unreal Engine we will be running container images for
     UNREAL_ENGINE_RELEASE="4.27"
     if [[ ! -z "$1" ]]; then
             HTTP_PORT="$1"
     else
             HTTP_PORT=10001
     fi

     if [[ ! -z "$2" ]]; then
             TURN_PORT="$2"
     else
             TURN_PORT=3578
     fi


     if [[ ! -z "$3" ]]; then
             STREAMER_PORT="$3"
     else
             STREAMER_PORT=8888
     fi




     # Verify that either curl is available
     if which curl 1>/dev/null; then
             HTTPS_COMMAND="curl -s"
     else
             echo "Please install curl"
             exit 1
     fi

     # Retrieve the public IP address of the host system
     PUBLIC_IP=$($HTTPS_COMMAND 'http://169.254.169.254/latest/meta-data/public-ipv4')


     # Run the Pixel Streaming example
     export UNREAL_ENGINE_RELEASE
     export EXTRA_PEERCONNECTION_OPTIONS
     export PUBLIC_IP
     export TURN_PORT
     export HTTP_PORT
     export STREAMER_PORT
     export PWD=/home/ubuntu/UE4-PixelStreaming-Container
     pushd ${PWD}
     docker-compose $COMPOSE_FLAGS up -d --force-recreate
     echo ""
     echo http://${PUBLIC_IP}:${HTTP_PORT}
     echo ""
 }

#main
if  [[ $# -lt 1 ]]; then
             echo "tools.sh build|start|ps|stop"
else
                  if [[ ! -z "$PROJECT_NAME" ]]; then
             COMPOSE_FLAGS="--project-name ${PROJECT_NAME}"
             echo "docker-compose project: ${PROJECT_NAME}"
                  else
             COMPOSE_FLAGS=""
                  fi

                  OPTION=$1
                  case $OPTION in
                          "build")
                                  echo "############BUILD############"
                                  build ${2}
                                  echo "############BUILD SUCCESSFUL############"
                                  ;;

                          "start")
                                  echo "############START############"
                                  start ${2} ${3} ${4}
                                  echo "############START SUCCESSFUL############"
                                  ;;

                          "ps")
                                  echo "############PS############"
                                  dcps
                                  ;;

                          "stop")
                                  echo "############STOP############"
                              stop
                              echo "############STOP SUCCESSFUL############"
                                  ;;

                          *)
                      echo "tools.sh build|start|stop"
                                  exit 1

                          esac
 fi









 import os
import boto3

client = boto3.client('autoscaling')

def get_env_variable(var_name):
    msg = "Set the %s environment variable"
    try:
        return os.environ[var_name]
    except KeyError:
        error_msg = msg % var_name

def lambda_handler(event, context):
    auto_scaling_groups = get_env_variable('NAMES').split()

    for group in auto_scaling_groups:
        if servers_need_to_be_started(group):
            action = "Starting"
            min_size = int(get_env_variable('MIN_SIZE'))
            max_size = int(get_env_variable('MAX_SIZE'))
            desired_capacity = int(get_env_variable('DESIRED_CAPACITY'))
        else:
            action = "Stopping"
            min_size = 0
            max_size = 0
            desired_capacity = 0

        print (action + ": " + group)
        response = client.update_auto_scaling_group(
            AutoScalingGroupName=group,
            MinSize=min_size,
            MaxSize=max_size,
            DesiredCapacity=desired_capacity,
        )

        print (response)

def servers_need_to_be_started(group_name):
    min_group_size = get_current_min_group_size(group_name)
    if min_group_size == 0:
        return True
    else:
        return False

def get_current_min_group_size(group_name):
    response = client.describe_auto_scaling_groups(
        AutoScalingGroupNames=[ group_name ],
    )
    return response["AutoScalingGroups"][0]["MinSize"]




mysqldump -h impact-receipt-10-2.c23unohjkkcv.us-west-2.rds.amazonaws.com -u prod_user -p impact_receipt_prod --set-gtid-purged=OFF > trueimpact-prod.sql


mysql -h prod-api.c23unohjkkcv.us-west-2.rds.amazonaws.com -u master -p  impact_receipt_prod < impact_receipt_prod.sql

GRANT ALL ON *.* TO 'master'@'%' IDENTIFIED BY 'Yp5RrqLAOI7283EwhRiL' WITH GRANT OPTION;
SHOW GRANTS FOR 'ubuntu'@'localhost';

UPDATE mariadb.user SET Super_Priv='Y' WHERE user='ubuntu' AND host='localhost';


GRANT SUPER ON *.* TO 'ubuntu'@'localhost' IDENTIFIED BY 'Abhinav6';

UPDATE mysql.user SET user='master',password=PASSWORD('Abhinav6') WHERE user='master';